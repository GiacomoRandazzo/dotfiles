{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Built Value": {
		"prefix": "blt",
		"body": [
			"abstract class ${1} implements Built<${1}, ${1}Builder> {",
			"\t${1}._();",
			"",
			"\tfactory ${1}([updates(${1}Builder b)]) = _$${1};",
			"",
			"\t${0:// }",
			"\t${0:// Fields}",
			"\t${0:// }",
			"",
			"}"
		],
		"description": "Built Value Class"
	},
	"Built Value Serializable": {
		"prefix": "blts",
		"body": [
			"abstract class ${1} implements Built<${1}, ${1}Builder> {",
			"\t${0:// fields go here}",
			"",
			"\t${1}._();",
			"",
			"\tfactory ${1}([updates(${1}Builder b)]) = _$${1};",
			"",
			"\tString toJson() {",
			"\t\treturn json.encode(serializers.serializeWith(${1}.serializer, this));",
			"\t}",
			"",
			"\tstatic ${1} fromJson(String jsonString) {",
			"\t\treturn serializers.deserializeWith(${1}.serializer, json.decode(jsonString));",
			"\t}",
			"",
			"\tstatic Serializer<${1}> get serializer => _$${1/(^[A-z]{1})/${1:/downcase}/}Serializer;",
			"}"
		],
		"description": "Serializable Built Value Class"
	},
	"Built Value Header": {
		"prefix": "blth",
		"body": [
			"library ${1};",
			"",
			"import 'dart:convert';",
			"",
			"import 'package:built_collection/built_collection.dart';",
			"import 'package:built_value/built_value.dart';",
			"import 'package:built_value/serializer.dart';",
			"",
			"part '${1}.g.dart';",
		],
		"description": "Built Value Imports and File Header"
	},
	"Custom Matcher for field": {
		"prefix": "testcm",
		"body": [
			"class Has${1} extends CustomMatcher {",
			"\tHas${1}(dynamic matcher) : super('has ${2} that is', '${2}', matcher);",
			"\t@override",
			"\tObject featureValueOf(dynamic actual) => actual.${2};",
			"}",
		],
		"description": "Add a CustomMatcher for testing if an object has a certain field"
	},
	"Test Scaffold": {
		"prefix": "tests",
		"body": [
			"import 'package:mockito/mockito.dart';",
			"import 'package:test/test.dart';",
			"",
			"// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //",
			"// Mocks",
			"",
			"// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //",
			"// Matchers",
			"",
			"// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //",
			"void main() {",
			"\tgroup('${TM_FILENAME_BASE/^(.*?)(_test|$)/${1:/pascalcase}/g}', () {",
			"\t",
			"\t});",
			"}",
		],
		"description": "Test Scaffold"
	},
	"Mock for class": {
		"prefix": "testmk",
		"body": [
			"class Mock${1} extends Mock implements ${1} {}"
		],
		"description": "Mock class"
	}
}